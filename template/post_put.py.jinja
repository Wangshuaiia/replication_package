import pytest
import json
import time

@pytest.mark.product("{{product_name}}")
def test_{{http_method}}_{{api_endpoint}}(
    setup_fixture, 
    api_client_instance
    ):

    response = api_client_instance.{{http_method}}(
        url="/api{{endpoint_path}}",
        {% if request_headers -%}
        headers={{request_headers|keeptype}},
        {% endif -%}
        proxies=None, 
        timeout=5,
        {% if request_payload -%}
        data=json.dumps({{request_payload}})
        {% endif -%}
    )
    
    # Check if response body exists before accessing
    if response.status_code != 204:
        print(f"Response body: \n {response.body}")
        response_body = response.body[0] if isinstance(response.body, list) else response.body
    else:
        response_body = None

    # Update virtual vehicle (VV) signal values
    {% for signal_module in signal_modules -%}
    {{signal_module}}.current_values_in_canoe()
    {% endfor %}
 
    time.sleep(10)

    # Check for correct status code
    assert response.status_code == {{expected_status_code}}

    {% if request_headers and "Content-Type" in request_headers -%}
    # Check API Content-Type header
    assert response.headers._headers["Content-Type"] == {{request_headers["Content-Type"]|keeptype}}
    {% endif %}

    # Assert response properties
    if response_body:
        {% for response_property, expected_value in response_properties.items() -%}
        assert response_body[{{response_property|keeptype}}] == {{expected_value|keeptype}}
        {% endfor %}

    # Assert virtual vehicle (VV) attributes to verify correct behavior
    {% for vv_property, expected_value in virtual_vehicle_attributes.items() -%}
    assert {{vv_property}} == {{expected_value|keeptype}}
    {% endfor %}
