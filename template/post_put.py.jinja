import pytest
import json
import time

@pytest.mark.product("spapi_tester")
def test_{{method}}_{{api_name}}(
    spapi_setup, 
    api_client, 
    vv, 
    assert_alive, 
    canoe_controller, 
    logger):

    response = api_client.{{method}}(
        url="/api{{path}}",
        {% if headers -%}
        headers={{headers|keeptype}},
        {% endif -%}
        proxies=None, 
        timeout=5,
        {% if payload -%}
        data=json.dumps({{payload}})
        {% endif -%}
    )
    
    # Check if response body exists before accessing
    if response.status_code != 204:
        print(f"Response body: \n {response.body}")
        response_body = response.body[0] if isinstance(response.body, list) else response.body
    else:
        response_body = None

    # Update VV signal values
    {% for module in modules -%}
    {{module}}.current_values_in_canoe()
    {% endfor %}
 
    time.sleep(10)

    # Check for correct status code
    assert response.status_code == {{status_code}}

    {% if headers and "Content-Type" in headers -%}
    # Check API version match
    assert response.headers._headers["Content-Type"] == {{headers["Content-Type"]|keeptype}}
    {% endif %}

    # Assert response
    if response_body:
        {% for api_prop, value in api_object.items() -%}
        assert response_body[{{api_prop|keeptype}}] == {{value|keeptype}}
        {% endfor %}
        pass
    
    # Assert VV attributes to verify correct behavior
    {% for vv_attribute, value in vv_attrs.items() -%}
    assert {{vv_attribute}} == {{value|keeptype}}
    {% endfor %}
